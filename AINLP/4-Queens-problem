AIM: Write a program in prolog to solve 4-Queens problem 
 
DESCRIPTION: 
 
This program defines the queens/1 predicate, which generates all possible 
solutions for the 4-Queens problem. The queens/1 predicate takes a single 
argument, Board, which represents the board with 4 squares. The queens/1 
predicate first defines the possible values for the Board using permutation/2, 
and then calls safe/1 to check if the solution is safe. 
The safe/1 predicate takes a single argument, Board, which represents the 
board with 4 squares. The base case is when the Board is empty, in which 
case it returns true. The recursive case is when the Board is not empty; in 
which case the first queen is removed from the Board and checked against 
the rest of the queens using safe/3, and then the rest of the Board is 
recursively checked using safe/1. 
The safe/3 predicate takes three arguments, Others, Queen, and Distance. 
The base case is when the distance is 4, in which case it returns true. The 
recursive case is when the Queen is not in the others and the Distance is less 
than 4, in which case the Queen is checked against the rest of the queens and 
the Distance is incremented. 
Finally, the program performs a query using findall/3 to find all possible 
solutions for the 4-Queens problem and writes the solutions using write/1. 
 
PROGRAM :

queens(Board) :- 
  Board = [_, _, _, _], 
  permutation([1, 2, 3, 4], Board), 
  safe(Board). 
 

safe([]). 
safe([Queen|Others]) :- 
  safe(Others, Queen, 1), 
  safe(Others). 
 
safe(_,_,4)
safe(Others, Queen, Distance) :- 
  \+ member(Queen, Others), 
  NewDistance is Distance + 1, 
  safe(Others, Queen, NewDistance). 
 

?- findall(Q, queens(Q), Solutions), write(Solutions). 
 
% Output 
[[2,4,1,3],[3,1,4,2]] 
